
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Hw1Final481;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
    }

    //ALL TESTS INCLUDING CORNER CASES (TOTAL: 9 TESTS)

    //TESTS OF INCORRECT INPUTS
    public void testIfIncorrectSideParamters(){
        int[] array={10,5,20};
        String print=isValid_WhatType_And_isLargeEnough(0, 3, 4,array);
        System.out.println(print);
    }
    public void testIfEmptyArray(){
        int[] array2=new int[10];
        String print=isValid_WhatType_And_isLargeEnough(10, 3, 4,array2);
        System.out.println(print);
    }

    //TESTS OF EQUILATERAL TRIANGLE
    public void valid_equilateralTriangle_And_largeEnough(){
        int[] array3={10,5,20};
        String print=isValid_WhatType_And_isLargeEnough(10, 10, 10,array3);
        System.out.println(print);
    }
    public void valid_equilateralTriangle_And_notlargeEnough(){
        int[] array4={10,5,20};
        String print=isValid_WhatType_And_isLargeEnough(5, 5, 5,array4);
        System.out.println(print);
    }

    //TESTS OF ISOSCELES TRIANGLE
    public void valid_isoscelesTriangle_And_largeEnough(){
        int[] array5={10,5,13};
        String print=isValid_WhatType_And_isLargeEnough(5, 5, 4,array5);
        System.out.println(print);
    }
    public void valid_isoscelesTriangle_And_notlargeEnough(){
        int[] array6={10,5,20};
        String print=isValid_WhatType_And_isLargeEnough(5, 5, 4,array6);
        System.out.println(print);
    }

    //TESTS OF SCALENE TRIANGLE
    public void valid_scaleneTriangle_And_largeEnough(){
        int[] array7={10,5,13};
        String print=isValid_WhatType_And_isLargeEnough(7, 12, 15,array7);
        System.out.println(print);
    }
    public void valid_scaleneTriangle_And_notlargeEnough(){
        int[] array8={50,5,20};
        String print=isValid_WhatType_And_isLargeEnough(7, 12, 15,array8);
        System.out.println(print);
    }

    //TEST OF A NOT VALID TRIANGLE
    public void notValidTriangle(){
        int[] array9={50,5,20};
        String print=isValid_WhatType_And_isLargeEnough(100, 2, 3,array9);
        System.out.println(print);
    }

    
    public static String isValid_WhatType_And_isLargeEnough(int a,int b,int c,int[] circumfrences){
        //Initialize: Returns a String of possible outcomes.
        String answer="";

        //STEP1: Check if the given sides is feasible. This means a side cannot be <=0

        if(a<=0 || b<=0 || c<=0){
          answer+="A given side cannot be equal or smaller than zero.";
          return answer;  
        }

        //STEP2: Check if the array is empty

        if(circumfrences.length==0){
            answer+="Given circumfrences array is empty.";
            return answer;
        } 

        //STEP3: Check if a triangle can be made with sides, a b and c using mathematical definition of a triangle
       
        int count=0;
        if(!(a>Math.abs(b-c) && a<(b+c))){
            count=1;
        }
        if(!(b>Math.abs(a-c) && b<(a+c))){
            count=1;
        }
        if(!(c>Math.abs(b-a) && c<(b+a))){
            count=1;
        }
        if(count==1){
            answer+="A triangle cannot be formed with given sides.";
            return answer;
        }
        else{
            count=0;
            answer+="A triangle can be formed with given sides.";

            //finding what type of triangle it is
            if(a==b){
                count++;
            }
            if(a==c){
                count++;
            }
            if(b==c){
                count++;
            }
            if(count==3){
                answer+="The triangle formed is a equilateral triangle.";
            }
            else{
                if(count==0){
                    answer+="The triangle formed is a isosceles triangle.";
                }
                else
                answer+="The triangle formed is a scalene triangle.";
            }
            count=0;
            //now lets find if it is large enough by comparing to the circumfrence needs in our circumfrence array.
            int mainCircumfrence=a+b+c;
            for(int i=0;i<circumfrences.length;i++){
                if(circumfrences[i]>mainCircumfrence){
                    answer+="The triangle formed is not large enough to satisfy the needs.";
                    return answer;
                }
            }
            answer+="The triangle formed is large enough to satisfy the needs.";
            return answer;
        }

    }

}
